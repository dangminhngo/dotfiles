; Declare eww instance for updating state variables
(defvar eww "eww --config ~/.config/eww/bar")

; Workspaces
(deflisten workspaces :initial "[]" "~/.dotfiles/scripts/get-workspaces")
(deflisten current_workspace :initial "1" "~/.dotfiles/scripts/get-active-workspace")
(defwidget workspaces []
  (eventbox :onscroll "~/.dotfiles/scripts/change-active-workspace {} ${current_workspace}" :class "workspaces-widget"
    (box :class "workspaces" :space-evenly true
      (for workspace in workspaces
        (eventbox :onclick "hyprctl dispatch workspace ${workspace.id}"
          (box :class "workspace-entry ${workspace.id == current_workspace ? "current" : ""} ${workspace.windows > 0 ? "occupied" : "empty"}"
            (label :text "${workspace.id == current_workspace ? "" : (workspace.windows > 0 ? "" : "")}")
            )
          )
        )
      )
    )
  )

; Clock
(defpoll time :interval "60s"
	`date +"%H:%M"`)

(defwidget clock [time]
  (eventbox :class "clock" :onclick "alacritty -e btop"
    (button :class "time" :onclick "~/.dotfiles/scripts/launch-calendar" "${time}")
  )
)

; @link https://github.com/hyprwm/Hyprland/issues/1348
;; Applications Launcher
;(defwidget launcher []
;  (box :space-evenly "false" (button :class "launcher" :onclick "~/.dotfiles/scripts/launcher" :tooltip "Applications" ""))
;)

;; Power Menu
;(defwidget power []
;  (box :space-evenly "false" (button :class "power" :onclick "~/.dotfiles/scripts/powermenu" :tooltip "Quit" ""))
;)

; System Guard (CPU, Memory, Disk, Temperature, Network)
;; CPU
(defwidget cpu []
  (box :class "cpu" :space-evenly false :spacing 4
    (label :class "sg-icon" :text "")
    (label :class "sg-label" :text "${round(EWW_CPU.avg, 0) > 9 ? round(EWW_CPU.avg, 0) : "0${round(EWW_CPU.avg, 0)}"}%")
  )
)
;; Memory
(defwidget memory []
  (box :class "memory" :space-evenly false :spacing 4
    (label :class "sg-icon" :text "")
    (label :class "sg-label" :text "${round(EWW_RAM.used_mem_perc, 0) > 9 ? round(EWW_RAM.used_mem_perc, 0) : "0${round(EWW_RAM.used_mem_perc, 0)}"}%")
  )
)
;; Disk
(defwidget disk []
  (box :class "disk" :space-evenly false :spacing 4
    (label :class "sg-icon" :text "")
    (label :class "sg-label" :text "${round(EWW_DISK["/"].used_perc, 0) > 9 ? round(EWW_DISK["/"].used_perc, 0) : "0${round(EWW_DISK["/"].used_perc, 0)}"}%")
  )
)
;; Temperature
(defwidget temp []
  (box :class "temp" :space-evenly false :spacing 4
    (label :class "sg-icon" :text "")
    (label :class "sg-label" :text "${round(EWW_TEMPS["K10TEMP_TCTL"], 0)}C")
  )
)
;; Net
;(defwidget net []
;  (box :class "net" :space-evenly false :spacing 4
;    (box :class "net-up" :space-evenly false :spacing 4
;      (label :class "sg-icon" :text "")
;      (label :class "sg-label" :text "${round(EWW_NET["enp6s0"].NET_UP / 1000000, 1) > 9 ? round(EWW_NET["enp6s0"].NET_UP / 1000000, 1) : "0${round(EWW_NET["enp6s0"].NET_UP / 1000000, 1)}"}M")
;    )
;    (box :class "net-down" :space-evenly false :spacing 4
;      (label :class "sg-icon" :text "")
;      (label :class "sg-label" :text "${round(EWW_NET["enp6s0"].NET_DOWN / 1000000, 1) > 9 ? round(EWW_NET["enp6s0"].NET_DOWN / 1000000, 1) : "0${round(EWW_NET["enp6s0"].NET_DOWN / 1000000, 1)}"}M")
;    )
;  )
;)

(defwidget sysguard []
  (box :space-evenly false :spacing 4
    (cpu) (memory) (disk) (temp)
  )
)

;; Recents zathura docs
;(defpoll recent_count :interval "60s"
;  `~/.dotfiles/scripts/zathura count_recent`
;)

;(defwidget zathura []
;  (box :space-evenly "false" (button :class "zathura" :onclick "~/.dotfiles/scripts/zathura" :tooltip "Recent documents (${recent_count} files)" ""))
;)

; Recording
(defvar rec false)

(defvar recording_indicator_button "(button :onclick '' (box :class 'recording' :space-evenly false :spacing 8 (label :class 'recording-indicator' :text '') (label :class 'recording-label' :text 'Recording ...')))")

(defwidget recording_indicator []
  (literal :content {rec ? recording_indicator_button : ""})
)

; Volume
(defvar vol false)

(defpoll vol_percentage :interval "5s"
  `~/.dotfiles/scripts/sysinfo get_vol`
)

(defvar vol_icon "")

(defwidget volume []
  (eventbox :onhover "${eww} update vol=true" :onhoverlost "${eww} update vol=false"
    (box :orientation "h" :space-evenly "false" :spacing 2
      (revealer :transition "slideleft" :reveal vol :duration "500ms"
        (box :class "volreveal" :space-evenly false :spacing 4
          (label :class "volpercentage" :text "${vol_percentage}%")
          (scale :class "volbar" :orientation "h" :tooltip "Volume: ${vol_percentage}%" :max 101 :min 0 :onchange "~/.dotfiles/scripts/sysinfo set_vol {}"  :value vol_percentage)
        )
      )
      (button :class "volume" :onclick "pavucontrol" "${vol_icon}")
    )
  )
)

; Network
(defpoll network_status_icon :interval "30s"
  `~/.dotfiles/scripts/sysinfo get_network_icon`
)

(defwidget network []
  (box :space-evenly "false" (button :class "network" :onclick "alacritty -e nmtui" :tooltip "Network" "${network_status_icon}"))
)

; Nightlight
(defvar nightlight_icon "")

(defwidget nightlight []
  (box :space-evenly "false" (button :class "nightlight" :onclick "~/.dotfiles/scripts/nightlight" :tooltip "Nightlight" "${nightlight_icon}"))
)

; Idle Inhibitor
(defvar idle_icon "")

(defwidget idle_inhibitor []
  (box :space-evenly "false" (button :class "idle-inhibitor" :onclick "~/.dotfiles/scripts/idle toggle" :tooltip "Idle Inhibitor" "${idle_icon}"))
)

; Right System Icons
(defwidget rightsys []
  (box :space-evenly false :spacing 4 (recording_indicator) (volume) (network) (idle_inhibitor) (nightlight) (clock :time "${time}"))
)

; Left System Icons
(defwidget leftsys []
  (box :space-evenly false :spacing 4 (sysguard))
)

; Status Bar
(defwindow bar
  :monitor 0
  :geometry (geometry :width "100%" :anchor "bottom center")
  :stacking "fg"
  :exclusive true
  :focusable false
  (box :class "bar-wrapper" :space-evenly "true"
    (box :halign "start" :space-evenly "false" :spacing 4 (leftsys))
    (box :halign "center" (workspaces))
    (box :halign "end" :space-evenly "false" :spacing 4 (rightsys))
  )
)
